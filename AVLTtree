package com.company;

public class AVLTree {

    IntelligentSIDC root;
    int Size;

    AVLTree(int size) {
        this.Size = size;
    }

    void setSize(int size) {
        this.Size = size;
    }

    // returns the height of the tree
    int getHeight(IntelligentSIDC node) {
        if (node == null)
            return 0;
        return node.Height;
    }

    int returnMaximum(int x, int y) {
        return (x > y) ? x : y;
    }

    // right rotation of the subtree at a node parent
    IntelligentSIDC switchRight(IntelligentSIDC parent) {
        IntelligentSIDC child = parent.left;
        IntelligentSIDC buffer = child.right;
        child.right = parent;
        parent.left = buffer;

        parent.Height = returnMaximum(getHeight(parent.left), getHeight(parent.right)) + 1;
        child.Height = returnMaximum(getHeight(child.left), getHeight(child.right)) + 1;

        // returns the new root
        return child;
    }

    IntelligentSIDC switchLeft(IntelligentSIDC parent) {
        IntelligentSIDC child = parent.right;
        IntelligentSIDC buffer = child.left;
        child.left = parent;
        parent.right = buffer;

        //  Update heights
        parent.Height = returnMaximum(getHeight(parent.left), getHeight(parent.right)) + 1;
        child.Height = returnMaximum(getHeight(child.left), getHeight(child.right)) + 1;

        // Return new root
        return child;
    }

    int getHeightDiff(IntelligentSIDC node) {
        if (node == null)
            return 0;
        return (getHeight(node.left) - getHeight(node.right));
    }

    IntelligentSIDC insertNewNode(IntelligentSIDC node, long key) {
        /* 1.  Perform the normal BST insertion */
        if (node == null)
            return (new IntelligentSIDC(key, "new student"));

        if (key < node.Key)
            node.left = insertNewNode(node.left, key);
        else if (key > node.Key)
            node.right = insertNewNode(node.right, key);
        else // Duplicate keys not allowed
            return node;

        /* 2. Update height of this ancestor node */
        node.Height = 1 + returnMaximum(getHeight(node.left),
                getHeight(node.right));

        /* 3. Get the balance factor of this ancestor
              node to check whether this node became
              unbalanced */
        int balance = getHeightDiff(node);

        // 4 possible cases
        if (balance > 1 && key < node.left.Key)
            return switchRight(node);

        if (balance < -1 && key > node.right.Key)
            return switchLeft(node);

        if (balance > 1 && key > node.left.Key) {
            node.left = switchLeft(node.left);
            return switchRight(node);
        }

        if (balance < -1 && key < node.right.Key) {
            node.right = switchRight(node.right);
            return switchLeft(node);
        }
        return node;
    }

    void AVLTreePrint(IntelligentSIDC node) { // pre order traversal
        if (node != null) {
            System.out.print(node.Key + " ");
            AVLTreePrint(node.left);
            AVLTreePrint(node.right);
        }
    }

    IntelligentSIDC AVLTreeSearch(IntelligentSIDC node, long key) {
        if (node.getKey() != key) {
            AVLTreeSearch(node.left, key);
            AVLTreeSearch(node.right, key);
        }
        return node;
    }

    IntelligentSIDC AVLTreeRemove(IntelligentSIDC StudentToRemove, long key) {
        if (StudentToRemove != null) {

            if (key < StudentToRemove.getKey())
                StudentToRemove.left = AVLTreeRemove(StudentToRemove.left, key);

            else if (key > StudentToRemove.getKey())
                StudentToRemove.right = AVLTreeRemove(StudentToRemove.right, key);
            else {
                if ((StudentToRemove.left == null) || (StudentToRemove.right == null)) {
                    IntelligentSIDC buffer = null;
                    if (buffer == StudentToRemove.left)
                        buffer = StudentToRemove.right;
                    else
                        buffer = StudentToRemove.left;

                    // No child case
                    if (buffer == null) {
                        buffer = StudentToRemove;
                        StudentToRemove = null;
                    } else // One child case
                        StudentToRemove = buffer; // Copy the contents of
                    // the non-empty child
                } else {
                    IntelligentSIDC buffer = minValueNode(root.right);
                    StudentToRemove.setKey(buffer.getKey());
                    StudentToRemove.right = AVLTreeRemove(StudentToRemove.right, buffer.getKey());
                }
            }
        }
        return StudentToRemove;
    }

    IntelligentSIDC minValueNode(IntelligentSIDC node)
    {
        IntelligentSIDC current = node;

        /* loop down to find the leftmost leaf */
        while (current.left != null)
            current = current.left;

        return current;
    }
}
