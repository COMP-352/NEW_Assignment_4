package com.company;

public class Heap{
    IntelligentSIDC[] Heap;
    int Size;
    int maxsize;

    static final int FRONT = 1;

    public IntelligentSIDC Student;

    Heap(int size){//, IntelligentSIDC student) {
        this.maxsize = size;
        this.Size = 0;
        Heap = new IntelligentSIDC[this.maxsize + 1];
        Heap[0] = Student;
       // this.Student = student;
    }

    int getParent(int position) {
        return position / 2;
    }

    int getLeftChild(int position) {
        return (2 * position);
    }

    int getRightChild(int position) {
        return (2 * position) + 1;
    }

    boolean Leaf(int position) {
        return position >= (this.Size / 2) && position <= this.Size;
    }

    void swap(int first, int second) {
        IntelligentSIDC buffer;
        buffer = Heap[first];
        Heap[first] = Heap[second];
        Heap[second] = buffer;
    }

    void balance(int position) {
        if (!Leaf(position)) {
            if (Heap[position].getKey() > Heap[getLeftChild(position)].getKey()
                    || Heap[position].getKey() > Heap[getRightChild(position)].getKey()) {

                if (Heap[getLeftChild(position)].getKey() < Heap[getRightChild(position)].getKey()) {
                    swap(position, getLeftChild(position));
                    balance(getLeftChild(position));
                } else {
                    swap(position, getRightChild(position));
                    balance(getRightChild(position));
                }
            }
        }
    }

    void insert(IntelligentSIDC newNode, String value) {
        if (this.Size >= maxsize) {
            return;
        }
        Heap[++this.Size] = newNode;
        int current = this.Size;

        while (Heap[current].getKey() < Heap[getParent(current)].getKey()) {
            swap(current, getParent(current));
            current = getParent(current);
        }

     //   this.SIDC.add(newNode, value)
    }

    void heapPrint() {
        for (int i = 1; i <= this.Size / 2; i++) {
            System.out.print(" PARENT : " + Heap[i]
                    + " LEFT CHILD : " + Heap[2 * i]
                    + " RIGHT CHILD :" + Heap[2 * i + 1]);
            System.out.println();
        }
    }

    void minHeap() {
        for (int position = (this.Size / 2); position >= 1; position--) {
            balance(position);
        }
    }

    void remove(int key) {
       // IntelligentSIDC popped = Heap[key];
        Heap[key] = Heap[this.Size--];
        balance(key);
    }

    IntelligentSIDC heapSearch(long key) {
        for (int i = 1; i <= this.Size / 2; i++) {
            if (Heap[i].getKey() == key) {
                return Heap[i];
            }
        }
        return null;
    }

    /*
    // Driver code
    public static void main(String[] arg)
    {
        System.out.println("The Min Heap is ");
        Heap minHeap = new Heap(15);
        minHeap.insert(5);
        minHeap.insert(3);
        minHeap.insert(17);
        minHeap.insert(10);
        minHeap.insert(84);
        minHeap.insert(19);
        minHeap.insert(6);
        minHeap.insert(22);
        minHeap.insert(9);
        minHeap.minHeap();

        minHeap.print();
        System.out.println("The Min val is " + minHeap.remove());
    } */
}
